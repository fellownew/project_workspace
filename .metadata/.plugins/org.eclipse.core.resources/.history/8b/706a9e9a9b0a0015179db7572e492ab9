<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.taommall.product.dao">
	<sql id="product-select">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from product
	</sql>
	
	<insert id="insertProduct" parameterType="Product">
		<selectKey resultType="int" keyProperty="productId" order="BEFORE">
			select c_product_id.nextval from dual
		</selectKey>
		insert into product 
		(product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id)
		values
		(#{productId}, #{productName}, #{productPrice}, #{category}, #{productInfo}, #{imagePath}, to_char(sysdate, 'yyyy-mm-dd'),#{expDate}, #{sellerId})
	</insert>
	
	<update id="updateProduct" parameterType="Product">
		update product set product_name=#{productName},product_price=#{productPrice},category=#{category},product_info=#{productInfo},image_path=#{imagePath},exp_date=#{expDate}
		where product_id=#{productId}
	</update>
	
	<update id="updateProductIgnoreImagePath" parameterType="Product">
		update product set product_name=#{productName},product_price=#{productPrice},category=#{category},product_info=#{productInfo},exp_date=#{expDate}
		where product_id=#{productId}
	</update>
	
	<delete id="deleteProduct" parameterType="int">
		delete from product where product_id=#{productId}
	</delete>
	
	<resultMap type="Product" id="product-resultMap">
		<id column="product_id" property="productId"/>
		<result column="product_name" property="productName"/>
		<result column="product_price" property="productPrice"/>
		<result column="category" property="category"/>
		<result column="product_info" property="productInfo"/>
		<result column="image_path" property="imagePath"/>
		<result column="regi_date" property="regiDate"/>
		<result column="exp_date" property="expDate"/>
		<result column="seller_id" property="sellerId"/>
	</resultMap>
	
	
	<select id="selectProductByIdNoPaging" parameterType="int" resultMap="product-resultMap">
		<include refid="product-select"/>
		where product_id=#{productId}
	</select>

	<select id="selectProductBySellerIdNoPaging" parameterType="String" resultMap="product-resultMap">
		<include refid="product-select"/>
		where seller_id=#{sellerId}
	</select>	
	
	<select id="selectAllProduct" parameterType="org.springframework.ui.Model" resultMap="product-resultMap">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductById" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where product_id=#{productId}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductlIKEName" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where product_name like '%'||#{productName}||'%'
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductByCategory" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where category=#{category}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductByexpDate" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where expDate=#{expDate}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductBySellerId" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where seller_id=#{sellerId}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductBetweenPrice" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where between price #{min} and #{max}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	<select id="selectProductMinPrice" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where price &gt;= #{price}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	<select id="selectProductMaxPrice" resultMap="product-resultMap" parameterType="org.springframework.ui.Model">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
		from (
			select ceil(rownum/#{contentsPerPage}) page, product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id
			from (
				<include refid="product-select"/>
				where price &lt;= #{price}
				order by exp_date asc
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectProductCount" resultType="_int">
		select count(*)from product
	</select>
	
	<select id="selectProductCount" resultType="_int">
		select count(*)from product
	</select>
	
	<select id="selectProductToRandom" resultMap="product-resultMap" parameterType="int">
		select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id from (
			select product_id,product_name,product_price,category,product_info,image_path,regi_date,exp_date,seller_id from product
			order by DBMS_RANDOM.VALUE
			)
		where <![CDATA[(rownum <= #{num})]]>
	</select>
	
</mapper>
