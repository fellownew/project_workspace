package kr.co.taommall.product.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import kr.co.taommall.common.PagingBean;
import kr.co.taommall.product.dao.ProductDAO;
import kr.co.taommall.product.vo.Product;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

@Service
public class ProductServiceImpl implements ProductService {
	private String abImagePath = "C:\\JAVA\\eclipse\\project_workspace\\shoppingmall\\WebContent\\upimage";
//	private String abImagePath = "C:\\JAVA\\apache-tomcat-7.0.59\\webapps\\shoppingmall\\upimage";
	private String deImagePath = "upimage/";
	@Autowired
	private ProductDAO dao;

	@Override
	public int insertProduct(Product product,MultipartFile upfile,MultipartFile infoUpfile){
		//파일명은 현재 시간으로 가져옴.
		long lFileName = System.currentTimeMillis();
		String fileName = lFileName+".jpg";
		String infoFileName = lFileName+"i.jpg";
		File file = new File(abImagePath,fileName);
		File infoFile = new File(abImagePath,infoFileName);
		try {
			upfile.transferTo(file);
			infoUpfile.transferTo(infoFile);
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		String imagePath = deImagePath+fileName;
		product.setImagePath(imagePath);
		String infoImagePath = deImagePath+infoFileName;
		product.setInfoImagePath(infoImagePath);
		return dao.insertProduct(product);
		//Product p = dao.selectProductByIdNoPaging(product.getProductId());
	}
	
	@Override
	public int updateProduct(Product product,MultipartFile upfile,MultipartFile infoUpfile){
		product = dao.selectProductByIdNoPaging(product.getProductId());
		
		long lFileName = System.currentTimeMillis();
		
		// upfile size가 !=0이면 삭제  
		if(upfile.getSize()!=0){
			File file = null;
			file = new File(abImagePath,product.getImagePath().substring(8));
			file.delete();			
			
			String fileName = lFileName+".jpg";
			file = new File(abImagePath,fileName);
			try {
				upfile.transferTo(file);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String imagePath = deImagePath+fileName;
			product.setImagePath(imagePath);
		}
		// infofile size가 !=0이면 삭제 
		if(infoUpfile.getSize()!=0){
			File infoFile = null;
			infoFile = new File(abImagePath,product.getInfoImagePath().substring(8));
			infoFile.delete();			
			 String infoFileName = lFileName+"i.jpg";
			infoFile = new File(abImagePath,infoFileName);
			try {
				infoUpfile.transferTo(infoFile);
			}catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String infoImagePath = deImagePath+infoFileName;
			product.setInfoImagePath(infoImagePath);
		}
		return dao.updateProduct(product);
	}

	@Override
	public int deleteProduct(int productId) {
		Product product = dao.selectProductByIdNoPaging(productId);
		File file = new File(abImagePath,product.getImagePath().substring(8));
		file.delete();
		return dao.deleteProduct(productId);
	}

	@Override
	public List<Product> selectAllProduct(int pageNo,Model model) {
		int totalContent = dao.selectProductCount();
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		//dao작업
		List<Product> list = dao.selectAllProduct(model);
		return list;
	}

	@Override
	public List<Product> selectProductById(int productId,int pageNo,Model model) {
		int totalContent = dao.selectProductCount();
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		model.addAttribute("productId", productId);
		return dao.selectProductById(model);
	}

	@Override
	public List<Product> selectProductLikeName(String productName,int pageNo,Model model) {
		int totalContent = dao.selectProductLikeNameCount(productName);
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		model.addAttribute("productName", productName);
		return dao.selectProductLikeName(model);
	}

	@Override
	public List<Product> selectProductByCategory(String productCategory,int pageNo,Model model) {
		model.addAttribute("category", productCategory);
		int totalContent = dao.selectProductCountByCategory(productCategory);
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		return dao.selectProductByCategory(model);
	}

	@Override
	public List<Product> selectProductByexpDate(String expDate,int pageNo,Model model) {
		int totalContent = dao.selectProductCount();
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		model.addAttribute("expDate", expDate);
		return dao.selectProductByexpDate(model);
	}

	@Override
	public List<Product> selectProductBySellerId(String sellerId,int pageNo,Model model) {
		int totalContent = dao.selectProductCount();
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		model.addAttribute("sellerId", sellerId);
		return dao.selectProductBySellerId(model);
	}

	@Override
	public List<Product> selectProductByPrice(@RequestParam(defaultValue="0") int lPrice,@RequestParam(defaultValue="0") int Hprice,int pageNo,Model model) {
		// TODO Auto-generated method stub 검색 조건에 따라 다르게 검색 함.
		int totalContent = dao.selectProductCount();
		PagingBean pagingBean = new PagingBean(totalContent, pageNo);
		int contentsPerPage =PagingBean.CONTENTS_PER_PAGE;
		model.addAttribute("contentsPerPage", contentsPerPage);
		model.addAttribute("pageNo", pageNo);
		model.addAttribute("pagingBean", pagingBean);
		model.addAttribute("min", lPrice);
		model.addAttribute("max",Hprice);
		
		
		return List<Product> list = dao.selectProductBetweenPrice(model);
	}
	
	@Override
	public Product selectProductByIdNoPaging(int productId,Model model){
		return dao.selectProductByIdNoPaging(productId);
	}
	
	@Override
	public List<Product> selectProductBySellerIdNoPaging(String sellerId,Model model){
		return dao.selectProductBySellerIdNoPaging(sellerId);
	}
	
	@Override
	public List<Product> selectProductToRandom(int num){
		return dao.selectProductToRandom(num);
	}
	
	@Override
	public int updateProductVolumeOfOrder(Model model){
		int cnt = dao.updateProductVolumeOfOrder(model);
		return cnt;
	}
}
