package kr.co.taommall.common.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.co.taommall.account.vo.Address;
import kr.co.taommall.account.vo.Buyer;
import kr.co.taommall.account.vo.Seller;
import kr.co.taommall.cart.service.CartService;
import kr.co.taommall.cart.vo.Cart;
import kr.co.taommall.order.service.OrderService;
import kr.co.taommall.order.vo.Order;
import kr.co.taommall.product.service.ProductService;
import kr.co.taommall.product.vo.Product;
import kr.co.taommall.recipient.service.RecipientService;
import kr.co.taommall.recipient.vo.Recipient;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/auth")
public class OrderController {

	@Autowired
	OrderService service;
	@Autowired
	ProductService productService;
	@Autowired
	RecipientService recipientService;
	@Autowired
	CartService cartService;

	
	@RequestMapping("/orderInfo.do")
	@ResponseBody
	public String orderInfo(@RequestParam int productId){

	Product product = productService.selectProductByIdNoPaging(productId,null);

	return product.toString();
	}
	
	@RequestMapping("/memberOrderForm.do")
	public String memberOrderForm(
			@RequestParam(value = "productId", required = true) String[] cartList,
			@RequestParam(value = "amount", required = true) String[] amountList,
			HttpServletRequest request, HttpSession session) {
		List list = new ArrayList();
		for (int idx = 0; idx < cartList.length; idx++) {
			int productId = Integer.parseInt(cartList[idx]);
			int amount = Integer.parseInt(amountList[idx]);
			Product product = productService.selectProductByIdNoPaging(
					productId, null);
			if (product != null) {
				Cart cart = new Cart();
				cart.setProductId(productId);
				cart.setAmount(amount);
				cart.setProduct(product);
				Buyer buyer = (Buyer) session.getAttribute("loginInfo");
				cart.setBuyerId(buyer.getBuyerId());
				list.add(cart);
			}
		}
		request.setAttribute("list", list);
		return "buyer/buyer_order_form.form";
	}

	@RequestMapping("/payment.do")
	public String payment(
			@RequestParam(value = "productId", required = true) String[] pIds,
			@RequestParam(value = "amount", required = true) String[] amounts,
			@ModelAttribute() Recipient recipient,
			@ModelAttribute Address address, HttpServletRequest request,
			HttpSession session) {
		recipient.setAddress(address);
		Buyer buyer = (Buyer) session.getAttribute("loginInfo");
		if (recipient.getDetail() == null) {
			recipient.setDetail("빠른 배송 부탁드립니다");
		}
		recipientService.insertRecipient(recipient);

		if (pIds != null && amounts != null && pIds.length == amounts.length) {
			for (int idx = 0; idx < pIds.length; idx++) {
				int productId = Integer.parseInt(pIds[idx]);
				int amount = Integer.parseInt(amounts[idx]);
				Product product = productService.selectProductByIdNoPaging(
						productId, null);
				if (product == null) {
					continue;
				}
				Order order = new Order(0, productId, amount, "결제완료",
						buyer.getBuyerId(), product.getSellerId(),
						recipient.getRecipientId(), null);
				int count1 = service.insertOrder(order);
			}
			return "redirect:/auth/complete.do?recipientId="
					+ recipient.getRecipientId();
		} else {
			request.setAttribute("errorMessage", "결제 실패 메인페이지로 이동합니다");
			return "WEB-INF/view/layout/error.jsp";
		}

	};

	@RequestMapping("complete.do")
	public String complete(@RequestParam(required = true) int recipientId,
			HttpServletResponse response, HttpServletRequest request,
			HttpSession session) {
		List<Order> list = service.selectOrderByRecipientId(recipientId);
		int price = 0;
		for (Order o : list) {
			Product product = productService.selectProductByIdNoPaging(
					o.getProductId(), null);
			if (product != null) {
				price = price + o.getAmount()
						* o.getProduct().getProductPrice();
				Buyer buyer = (Buyer) session.getAttribute("loginInfo");
				Cart cart = cartService.selectCartByProductId(new Cart(buyer
						.getBuyerId(), product.getProductId(), 0));
				if (cart != null) {
					int count = cartService.deleteCart(cart);
				}
			}
			Recipient recipient = recipientService.selectRecipientById(o.getRecipientId());
			o.setRecipient(recipient);
		}
		System.out.println(list);
		request.setAttribute("list", list);
		request.setAttribute("price", price);
		return "member/member_order_complete.form";
	}

	@RequestMapping("completeList.do")
	public ModelAndView completeList(
			@RequestParam(defaultValue = "1") int page,
			@RequestParam(defaultValue = "모두보기") String status,
			HttpSession session, HttpServletRequest request) {
		Buyer buyer = (Buyer) session.getAttribute("loginInfo");
		Map map = service.selectOrderByStatusPaging(page,status);
		return new ModelAndView("member/member_order_complete_list.form",map);
	}

	@RequestMapping("orderManager.do")
	public String orderManager(@RequestParam(defaultValue="모두보기") String status,HttpSession session, HttpServletRequest request) {
		String sellerId = ((Seller) session.getAttribute("loginInfo"))
				.getSellerId();
		Order order = new Order();
		order.setSellerId(sellerId);
		order.setStatus(status);
		List<Order> list = service.selectOrderListByStatus(order);
		request.setAttribute("list", list);
		request.setAttribute("status", status);

		return "seller/order_manager_list.form";
	}
	
	@RequestMapping("orderStatusUpdate.do")
	public String orderStatusUpdate(
			@RequestParam(required = true) int recipientId,
			@RequestParam(required = true) String status, HttpSession session) {
		Order order = new Order();
		order.setRecipientId(recipientId);
		order.setStatus(status);
		service.updateOrder(order);
		Seller seller = (Seller) session.getAttribute("loginInfo");
		return "redirect:orderManager.do";
	}

	@RequestMapping("main.do")
	public String main() {
		return "main.jsp";
	}

}
